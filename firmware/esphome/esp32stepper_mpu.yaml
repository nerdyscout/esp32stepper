# This example uses a custom TMC2209 component to control the PD Stepper
# Motor can be moved using a slider within ESPHome

external_components:
  - source: github://slimcdk/esphome-custom-components
    components: [tmc2209_hub, tmc2209, stepper]

esphome:
  #  name: esp32stepper
  project:
    name: esp32stepper
    version: "1.0"
  platformio_options:
    board_build.flash_mode: dio
    upload_speed: 921600
  on_boot:
    - tmc2209.configure:
        microsteps: 4
        direction: clockwise
        interpolation: true
        tcool_threshold: 400
    - tmc2209.stallguard:
        threshold: 60
    - tmc2209.currents:
        irun: 16
        ihold: 0
        tpowerdown: 0
        iholddelay: 0
        standstill_mode: freewheeling

    - output.turn_off: #Microstep resolution configuration (internal pull-down resistors: MS2, MS1: 00: 1/8, 01: 1/32, 10: 1/64 11: 1/16
        id: MS1_pin
    - output.turn_off:
        id: MS2_pin

      #set PD voltage    # 5V  9V  12V  15V  20V
    - output.turn_off: # 1   0    0    0    0
        id: CFG1_pin
    - output.turn_on: # -   0    0    1    1
        id: CFG2_pin
    - output.turn_off: # -   0    1    1    0
        id: CFG3_pin

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: https://github.com/nerdyscout/esp32stepper/blob/main/software/esphome/esp32stepper.yaml
  import_full_config: false # or true

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

web_server:
  port: 80

captive_portal:

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password

api:
  password: !secret api_password

logger:

i2c:
  sda: GPIO45
  scl: GPIO38
  scan: true
#  id: bus_a

uart:
  tx_pin: GPIO43
  rx_pin: GPIO44
  baud_rate: 115200

output:
  - platform: gpio
    pin: GPIO14
    id: MS1_pin
  - platform: gpio
    pin: GPIO13
    id: MS2_pin

  - platform: gpio
    pin: GPIO48
    id: CFG1_pin
  - platform: gpio
    pin: GPIO07
    id: CFG2_pin
  - platform: gpio
    pin: GPIO47
    id: CFG3_pin

  - platform: gpio
    pin: GPIO04
    id: IO1
  - platform: gpio
    pin: GPIO03
    id: IO2
  - platform: gpio
    pin: GPIO02
    id: IO3

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO01
    num_leds: 1
    id: led1
    name: "LED1"
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: GPIO46
    id: led2
    num_leds: 1
    name: "LED2"

stepper:
  - platform: tmc2209
    id: driver
    max_speed: 800 steps/s
    acceleration: 1500 steps/s^2
    deceleration: 1500 steps/s^2
    rsense: 100 mOhm
    vsense: False
    enn_pin: GPIO09
    diag_pin: GPIO12
    index_pin: GPIO11
    on_status:
      - logger.log:
          format: "Driver is reporting an update! (code %d)"
          args: ["code"]
    on_stall:
      - logger.log: "Motor stalled!"
      - stepper.stop: driver
      - light.turn_on:
          id: led1
          transition_length: 0s
      - delay: 250ms
      - light.turn_off:
          id: led1
          transition_length: 1s

button:
  - platform: restart
    name: Restart

  - platform: template
    name: Stop
    on_press:
      - stepper.stop: driver

binary_sensor:
  #  - platform: gpio
  #    name: "Power Good"
  #    pin:
  #      number: GPIO11
  #      mode: INPUT
  #      inverted: true
  #    device_class: power
  #    filters:
  #      - delayed_on: 10ms

  - platform: gpio
    name: Button 1
    pin:
      number: GPIO17
      mode: INPUT
      inverted: true
    id: btn1
    filters:
      - delayed_on: 10ms

  - platform: gpio
    name: Button 2
    id: btn2
    pin:
      number: GPIO21
      mode: INPUT
      inverted: true
    filters:
      - delayed_on: 10ms

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    lambda: |-
      it.print(0, 0, id(roboto), "Hello World!");

sensor:
  - platform: mpu6050
    #    address: 0x68
    update_interval: 0s
    accel_x:
      name: "MPU6050 Accel X"
    accel_y:
      name: "MPU6050 Accel Y"
    accel_z:
      name: "MPU6050 Accel Z"
    gyro_x:
      name: "MPU6050 Gyro X"
    gyro_y:
      name: "MPU6050 Gyro Y"
    gyro_z:
      name: "MPU6050 Gyro Z"
    temperature:
      name: "MPU6050 Temperature"
  #    internal: false # publish sensor data to Home Assistant and/or web server

  - platform: bme280_i2c
    update_interval: 10s
    temperature:
      name: "BME280 Temperature"
    pressure:
      name: "BME280 Pressure"
    humidity:
      name: "BME280 Humidity"

  - platform: adc
    pin: GPIO05
    name: VBUS Voltage
    update_interval: 10s
    attenuation: 12dB
    filters:
      - multiply: 8.47742

number:
  - platform: template
    name: Target position
    min_value: -10000
    max_value: 10000
    step: 100
    lambda: return id(driver)->current_position;
    update_interval: 1s
    set_action:
      - stepper.set_target:
          id: driver
          target: !lambda "return x;"

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 10
